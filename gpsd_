#!/usr/bin/env python3

"""
Wildcard-plugin to monitor gpsd attribute values.

To monitor gpsd, link gpsd_<aspect> to this file, where <aspect> is one of
sat, fix, pos, alt, mov, trk, err, dop, snr, az, el

Requires the GPSD Python client library to be available.

Releases:

  2025-04-30 - Initial
  2025-05-02 - Added SNR graph
  2025-05-03 - Added azimuth and elevation graphs
  2025-05-05 - Refactored and added type declarations
  2025-05-15 - Rearrangement to satisfy pylint
  2025-06-18 - Load graph options from structured const data


Copyright (c) 2025 Terry Burton <tez@terryburton.co.uk>

Licensed under the Apache License, Version 2.0 (the "License"); you may not
use this file except in compliance with the License.  You may obtain a copy
of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS, WITHOUT
WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  See the
License for the specific language governing permissions and limitations
under the License.


Magic markers
 #%# capabilities=autoconf suggest
 #%# family=auto
"""


import json
import os
import pickle
import re
import socket
import stat
import sys
import time
from typing import Any, Dict, List, Optional, Set, Tuple, Union, Callable, cast
from gps import gps, WATCH_ENABLE, WATCH_NEWSTYLE  # type: ignore


#
#  Type aliases
#

GraphConfig = Dict[str, str]
ConfigFieldList = List[Tuple[str, str, str]]
TPVConfig = Dict[str, Union[GraphConfig, ConfigFieldList]]
SKYConfig = Dict[str, Union[GraphConfig, ConfigFieldList]]
SATConfig = Dict[str, Union[GraphConfig, str]]
GPSData = Dict[str, Any]


#
#  Consts
#

ID_MAP: Dict[int, str] = { 0: 'GP', 1: 'SB', 2: 'GA', 3: 'BD', 4: 'IM', 5: 'QZ', 6: 'GL', 7: 'IR' }

TPV_ASPECTS: Dict[str, TPVConfig] = {
    'sat': {
        'graph': {
            'category': 'gps',
            'title':    'gpsd: Satellites',
            'vlabel':   'Number of satellites',
            'args':      '--base 1000 --lower-limit 0',
        },
        'fields': [('seen', 'Seen', 'AREA'), ('used', 'Used', 'AREA')],
    },
    'fix': {
        'graph': {
            'category': 'gps',
            'title':    'gpsd: Fix mode',
            'vlabel':   'Mode',
            'args':     '--base 1000 --lower-limit 0',
        },
        'fields': [('mode', 'Fix mode (1 = No fix; 2 = 2D; 3 = 3D)', 'AREA')],
    },
    'pos': {
        'graph': {
            'category':     'gps',
            'title':        'gpsd: Location',
            'vlabel':       'Lat/lon (degrees)',
            'args':         '--base 1000 --lower-limit -180 --upper-limit 180 --rigid',
            'printf':       '%.7lf',
        },
        'fields': [('lat', 'Latitude', 'LINE1'), ('lon', 'Longitude', 'LINE1')],
    },
    'alt': {
        'graph': {
            'category': 'gps',
            'title':    'gpsd: Altitude',
            'vlabel':   'Altitude (m)',
            'args':     '--base 1000',
        },
        'fields': [('alt', 'Altitude', 'LINE1')],
    },
    'mov': {
        'graph': {
            'category': 'gps',
            'title':    'gpsd: Movement',
            'vlabel':   'Rate (m/s)',
            'args':     '--base 1000',
        },
        'fields': [('speed', 'Speed', 'LINE1'), ('climb', 'Climb', 'LINE1')],
    },
    'trk': {
        'graph': {
            'category': 'gps',
            'title':    'gpsd: Track',
            'vlabel':   'Heading (degrees)',
            'args':     '--base 1000 --lower-limit 0 --upper-limit 360 --rigid',
        },
        'fields': [('track', 'Track', 'LINE1')],
    },
    'err': {
        'graph': {
            'category': 'gps',
            'title':    'gpsd: Errors',
            'vlabel':   'Error',
            'args':     '--base 1000 --lower-limit 0',
        },
        'fields': [
            ('epy', 'Latitude error (m)', 'LINE1'),
            ('epx', 'Longitude error (m)', 'LINE1'),
            ('eps', 'Speed error (m)', 'LINE1'),
            ('epv', 'Climb error (m)', 'LINE1'),
        ],
    },
}

SKY_ASPECTS: Dict[str, SKYConfig] = {
    'dop': {
        'graph': {
            'category': 'gps',
            'title':    'gpsd: Dilution of precision',
            'vlabel':   'Dilution of precision',
            'args':     '--base 1000 --lower-limit 0',
        },
        'fields': [
            ('ydop', 'Latitudinal', 'LINE1'),
            ('xdop', 'Longitudinal', 'LINE1'),
            ('hdop', 'Horizontal', 'LINE1'),
            ('vdop', 'Vertical', 'LINE1'),
            ('pdop', 'Positional', 'LINE1'),
            ('tdop', 'Time', 'LINE1'),
            ('gdop', 'Geometric', 'LINE1'),
        ],
    },
}

SAT_ASPECTS: Dict[str, SATConfig] = {
    'snr': {
        'graph': {
            'category': 'gps',
            'title':    'gpsd: Signal to Noise',
            'vlabel':   'SNR',
            'args':     '--base 1000 --lower-limit 0',
        },
        'item': 'ss',
    },
    'az': {
        'graph': {
            'category': 'gps',
            'title':    'gpsd: Azimuth',
            'vlabel':   'Azimuth (degrees)',
            'args':     '--base 1000 --lower-limit 0 --upper-limit 360 --rigid',
        },
        'item': 'az',
    },
    'el': {
        'graph': {
            'category': 'gps',
            'title':    'gpsd: Elevation',
            'vlabel':   'Elevation (degrees)',
            'args':     '--base 1000 --lower-limit 0 --upper-limit 90 --rigid',
        },
        'item': 'el',
    },
}

TPV_FIELDS: List[str] = [
    f for cfg in TPV_ASPECTS.values()
    for f, _, _ in cast(ConfigFieldList, cfg['fields'])
    if f not in ('seen', 'used')
]

SKY_FIELDS: List[str] = [
    f for cfg in SKY_ASPECTS.values()
    for f, _, _ in cast(ConfigFieldList, cfg['fields'])
]

SAT_FIELDS: List[str] = [
    cast(str, cfg['item']) for cfg in SAT_ASPECTS.values()
]


#
#  Helpers
#

def log_error(msg: str) -> None:
    """Outputs given error message"""
    print(msg, file=sys.stderr)


def process_tpv(data: GPSData, report: Dict[str, Any]) -> None:
    """Process a TPV report"""
    for field in TPV_FIELDS:
        data[field] = getattr(report, field, None)


def process_sky(data: GPSData, report: Dict[str, Any], known_satellites: Set[str]) -> None:
    """Process a SKY report"""
    if hasattr(report, 'satellites'):
        data['seen'] = data['used'] = 0
        for field in SKY_FIELDS:
            data[field] = getattr(report, field, None)
        for field in SAT_FIELDS:
            data[field] = { sat: "U" for sat in known_satellites or [] }
        for sat in report.satellites:
            data['seen'] += 1
            data['used'] += 1 if getattr(sat, 'used', False) else 0
            gnssid: Optional[int] = getattr(sat, 'gnssid', None)
            svid: Optional[int] = getattr(sat, 'svid', None)
            if gnssid is not None and svid is not None:
                sat_id: str = ID_MAP.get(gnssid, '_') + f" {svid}"
                for field in SAT_FIELDS:
                    value: Optional[float] = getattr(sat, field, None)
                    data[field][sat_id] = value if value and value > 0 else "U"


#
#  Generally gpsd will report data once per second
#
def read_gps(known_satellites: Set[str], timeout: float) -> Optional[GPSData]:
    """Connect to gpsd and attempt to read data"""
    session = gps(mode=WATCH_ENABLE | WATCH_NEWSTYLE)
    start_time: float = time.time()
    data: GPSData = {}
    sky_received: bool = False
    tpv_received: bool = False

    while time.time() - start_time < timeout:
        try:
            report: Dict[str, Any] = session.next()
            if report['class'] == 'TPV':
                process_tpv(data, report)
                tpv_received = True
            elif report['class'] == 'SKY':
                process_sky(data, report, known_satellites)
                sky_received = True

            #
            #  Return everything or nothing
            #
            if tpv_received and sky_received:
                return data

        except (StopIteration, KeyError):
            pass
        except (json.JSONDecodeError, ValueError) as err:
            log_error(f"Malformed data: {err}")
        except (OSError, socket.error) as err:
            log_error(f"Error reading GPS data: {err}")
            break

        #
        #  Don't busy wait
        #
        time.sleep(0.2)

    #
    #  Timed out
    #
    return None


def read_cache(statefile: str) -> Optional[GPSData]:
    """Return data from a fresh cache file"""

    #
    #  Ignore existing state if it is missing or too old
    #
    if not os.path.isfile(statefile) or time.time() - os.stat(statefile)[stat.ST_MTIME] > 60:
        return None

    try:
        with open(statefile, "rb") as file:
            return cast(GPSData, pickle.load(file))
    except (FileNotFoundError, EOFError, pickle.UnpicklingError, OSError) as err:
        log_error(f"Error opening statefile '{statefile}': {err}")

    return None


def update_cache(statefile: str, data: GPSData) -> None:
    """Freshen the cache file"""

    try:
        with open(statefile, "wb") as file:
            pickle.dump(data, file)
    except (OSError, pickle.PicklingError, TypeError) as err:
        log_error(f"Error updating statefile '{statefile}': {err}")


def read_sats(satsfile: str) -> Optional[Set[str]]:
    """Read the list of known satellites"""

    if not os.path.isfile(satsfile):
        return set()

    try:
        with open(satsfile, "rb") as file:
            return cast(Set[str], pickle.load(file))
    except (FileNotFoundError, EOFError, pickle.UnpicklingError, OSError) as err:
        log_error(f"Error opening satsfile '{satsfile}': {err}")

    return None


def update_sats(satsfile: str, sats: Set[str]) -> None:
    """Update the list of known satellites"""

    try:
        tmpfile: str = satsfile + ".tmp"
        with open(tmpfile, "wb") as file:
            pickle.dump(sats, file)
        os.replace(tmpfile, satsfile)
    except (OSError, pickle.PicklingError, TypeError) as err:
        log_error(f"Error updating satsfile '{satsfile}': {err}")


def get_gps_data() -> Optional[GPSData]:
    """Fetch gps data from either the cache or gpsd"""

    timeout: float = float(os.environ.get("GPSD_TIMEOUT", 2))

    state_file_dir: Optional[str] = os.environ.get('MUNIN_PLUGSTATE', None)

    state_file: Optional[str] = (
        os.path.join(state_file_dir, "gpsd.state")
        if state_file_dir else None
    )

    sats_file: Optional[str] = (
        os.path.join(state_file_dir, "gpsd_sats.state")
        if state_file_dir else None
    )

    if not state_file_dir:
        log_error(
            "Warning: Missing MUNIN_PLUGSTATE environment variable.\n"
            "Disabling cache and satsfile."
        )

    data: Optional[GPSData] = None
    if state_file:
        data = read_cache(state_file)
        if data:
            return data

    known_satellites: Optional[Set[str]] = read_sats(sats_file) if sats_file else None

    data = read_gps(known_satellites or set(), timeout)

    if sats_file is not None and known_satellites is not None and data is not None:
        known_satellites.update(data['ss'].keys())
        update_sats(sats_file, known_satellites)

    if state_file and data:
        update_cache(state_file, data)

    return data


def suggest() -> None:
    """munin suggest action"""
    for aspect in TPV_ASPECTS:
        print(aspect)
    for aspect in SKY_ASPECTS:
        print(aspect)
    for aspect in SAT_ASPECTS:
        print(aspect)


def config(aspect: str, data: GPSData) -> bool:
    """munin config action"""
    cfg: Optional[Union[TPVConfig, SKYConfig, SATConfig]] = None
    if aspect in TPV_ASPECTS:
        cfg = TPV_ASPECTS[aspect]
    elif aspect in SKY_ASPECTS:
        cfg = SKY_ASPECTS[aspect]
    elif aspect in SAT_ASPECTS:
        cfg = SAT_ASPECTS[aspect]
    else:
        log_error("Bad aspect")
        return False

    for conf, value in cast(GraphConfig, cfg['graph']).items():
        print(f"graph_{conf} {value}")

    if 'fields' in cfg:
        for field, label, draw in cast(ConfigFieldList, cfg['fields']):
            print(f"{field}.label {label}")
            print(f"{field}.draw {draw}")
    elif 'item' in cfg:
        natsort: Callable[[str], List[Union[int, str]]] = lambda s: [
            int(t) if t.isdigit() else t.lower() for t in re.split(r'(\d+)', s)
        ]
        for sat_id in sorted(data[cast(str, cfg['item'])], key = natsort):
            field = re.sub('[^A-Za-z0-9_]', '_', sat_id)
            print(f"{field}.label {sat_id}")

    return True


def fetch(aspect: str, data: GPSData) -> bool:
    """munin default action"""

    if aspect in TPV_ASPECTS:
        for field, _, _ in cast(ConfigFieldList, TPV_ASPECTS[aspect]['fields']):
            print(f"{field}.value {data[field]}")
    elif aspect in SKY_ASPECTS:
        for field, _, _ in cast(ConfigFieldList, SKY_ASPECTS[aspect]['fields']):
            print(f"{field}.value {data[field]}")
    elif aspect in SAT_ASPECTS:
        for sat_id, val in data[cast(str, SAT_ASPECTS[aspect]['item'])].items():
            attr: str = re.sub('[^A-Za-z0-9_]', '_', sat_id)
            print(f"{attr}.value {val}")
    else:
        print("Bad aspect")
        return False
    return True


def main() -> None:
    """Launched as a munin plugin or by munin-run"""

    data: Optional[GPSData] = get_gps_data()
    if not data:
        log_error("Failed to retrieve GPS data within timeout.")
        sys.exit(1)

    if len(sys.argv) > 1 and sys.argv[1] == "autoconf":
        print('yes' if data else 'no')
        return

    if len(sys.argv) > 1 and sys.argv[1] == "suggest":
        suggest()
        return

    aspect: str = list(os.path.split(sys.argv[0]))[1].split('_', 1)[1]
    if not aspect:
        log_error("Missing aspect")
        sys.exit(1)

    if len(sys.argv) > 1 and sys.argv[1] == "config":
        if not config(aspect, data):
            sys.exit(1)
        return

    if len(sys.argv) > 1:
        log_error("Bad argument")
        sys.exit(1)

    if not fetch(aspect, data):
        sys.exit(1)


if __name__ == "__main__":
    main()
